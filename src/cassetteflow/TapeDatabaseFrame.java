/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package cassetteflow;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.TreeMap;
import javax.swing.DefaultListModel;

/**
 *
 * @author Nathan
 */
public class TapeDatabaseFrame extends javax.swing.JFrame {
    private TreeMap<String, ArrayList<String>> tapeDB;
    
    private HashMap<String, AudioInfo> audioInfoDB;
    
    private CassetteFlowFrame cassetteFlowFrame;
    
    private CassetteFlow cassetteFlow;
    
    private int currentTapeLength = 0;
    
    private boolean remoteDB = false;

    /**
     * Creates new form TapeDatabaseFrame
     */
    public TapeDatabaseFrame() {
        initComponents();
    }
    
    /**
     * Set the CassetteFlow frame
     * 
     * @param cassetteFlowFrame 
     */
    public void setCassetteFlowFrame(CassetteFlowFrame cassetteFlowFrame, boolean remoteDB) {
        this.cassetteFlowFrame = cassetteFlowFrame;
        this.cassetteFlow = cassetteFlowFrame.getCassetteFlow();
        setTapeDB(cassetteFlow.tapeDB);
        setAudioInfoDB(cassetteFlow.audioInfoDB);
        syncButton.setEnabled(remoteDB);
    }
    
    /**
     * Set the tape database
     */
    public void setTapeDB(TreeMap<String, ArrayList<String>> tapeDB) {
        this.tapeDB = tapeDB;
        
        DefaultListModel model = new DefaultListModel();
        
        for(Object key: tapeDB.keySet()) {
            model.addElement(key);
        }
        
        tapeDBJList.setModel(model);
    }
    
    /**
     * Given a tapeId get the audio info objects associated with this id
     * 
     * @param tapeId
     * @return 
     */
    private ArrayList<AudioInfo> getAudioInfoList(String tapeId) {
        ArrayList<AudioInfo> audioInfoList = new ArrayList<>();
        
        ArrayList<String> audioIds = tapeDB.get(tapeId);
        if(audioIds != null) {
            for(String audioId: audioIds) {
                AudioInfo audioInfo = audioInfoDB.get(audioId);
                audioInfoList.add(audioInfo);
            }
            
            return audioInfoList;
        }
        
        return null;
    }
    
    /**
     * Set the Audio Info database
     * 
     * @param audioInfoDB 
     */
    public void setAudioInfoDB(HashMap<String, AudioInfo> audioInfoDB) {
        this.audioInfoDB = audioInfoDB;
    }
    
    /**
     * Set the selected tape ID
     * @param tapeId 
     */
    public void setSelectedTapeId(String tapeId) {
        if(tapeDB.containsKey(tapeId)) {
            tapeDBJList.setSelectedValue(tapeId, true);
        }
    }
    
    /**
     * Set the currently playing track
     * 
     * @param currentPlayingTrack 
     */
    void setSelectedTrack(int currentPlayingTrack) {
        if(currentPlayingTrack != -1) {
            int index = currentPlayingTrack - 1;
            audioFileJList.setSelectedIndex(index);
        }
    }
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        tapeDBJList = new javax.swing.JList<>();
        closeButton = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        audioFileJList = new javax.swing.JList<>();
        loadTapeButton = new javax.swing.JButton();
        totalTimeLabel = new javax.swing.JLabel();
        syncButton = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Tape Database (Local)");

        tapeDBJList.setModel(new javax.swing.AbstractListModel<String>() {
            String[] strings = { "Item 1", "Item 2", "Item 3", "Item 4", "Item 5" };
            public int getSize() { return strings.length; }
            public String getElementAt(int i) { return strings[i]; }
        });
        tapeDBJList.addListSelectionListener(new javax.swing.event.ListSelectionListener() {
            public void valueChanged(javax.swing.event.ListSelectionEvent evt) {
                tapeDBJListValueChanged(evt);
            }
        });
        jScrollPane1.setViewportView(tapeDBJList);

        closeButton.setText("Close");
        closeButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                closeButtonActionPerformed(evt);
            }
        });

        jScrollPane2.setViewportView(audioFileJList);

        loadTapeButton.setText("Load Tape");
        loadTapeButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                loadTapeButtonActionPerformed(evt);
            }
        });

        totalTimeLabel.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        totalTimeLabel.setText("Total Time: 00:00:00 ");

        syncButton.setText("Merge With Local DB");
        syncButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                syncButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(loadTapeButton)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(totalTimeLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(syncButton)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(closeButton))
            .addGroup(layout.createSequentialGroup()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 182, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 510, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 315, Short.MAX_VALUE)
                    .addComponent(jScrollPane2))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(closeButton)
                    .addComponent(loadTapeButton)
                    .addComponent(totalTimeLabel)
                    .addComponent(syncButton)))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void closeButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_closeButtonActionPerformed
        setVisible(false);
        dispose();
    }//GEN-LAST:event_closeButtonActionPerformed
    
    /**
     * Detect the the selection
     * @param evt 
     */
    private void tapeDBJListValueChanged(javax.swing.event.ListSelectionEvent evt) {//GEN-FIRST:event_tapeDBJListValueChanged
        if (!evt.getValueIsAdjusting()) {
            String key = tapeDBJList.getSelectedValue();
            displayTracksForTapeId(key);
        }
    }//GEN-LAST:event_tapeDBJListValueChanged
    
    /**
     * 
     * @param tapeId 
     */
    private void displayTracksForTapeId(String tapeId) {
        DefaultListModel model = new DefaultListModel();
        ArrayList<String> audioIdList = tapeDB.get(tapeId);

        int totalTime = 0;
        for (int i = 0; i < audioIdList.size(); i++) {
            String audioId = audioIdList.get(i);
            AudioInfo audioInfo = audioInfoDB.get(audioId);
            String trackCount = String.format("%02d", (i + 1));

            int trackTotal = 0;

            if (audioInfo != null) {
                totalTime += audioInfo.getLength() + 4;
                String trackName = "[" + trackCount + "] " + audioInfo;
                model.addElement(trackName);

                // see if there is additional track information if this 
                // is for a long youtube mix for example
                if (cassetteFlow.tracklistDB.containsKey(audioId)) {
                    TrackListInfo trackListInfo = cassetteFlow.tracklistDB.get(audioId);
                    ArrayList<String> tracks = trackListInfo.getTrackNumberAndTitles();

                    for (String track : tracks) {
                        model.addElement(track);
                    }

                    trackTotal += trackListInfo.getTrackCount();
                } else {
                    trackTotal++;
                }
            } else {
                String trackName = "[" + trackCount + "] " + " Invalid ID -- No audio file loaded ...";
                model.addElement(trackName);
            }
        }

        // add the total time 
        currentTapeLength = totalTime;

        // show to total play time
        totalTimeLabel.setText("Play Time: " + CassetteFlowUtil.getTimeString(totalTime));

        // update the UI with mp3/flac info records
        audioFileJList.setModel(model);
    }
    
    /**
     * Load a tape and associated audio info objects to the main UI
     * 
     * @param evt 
     */
    private void loadTapeButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_loadTapeButtonActionPerformed
        String tapeID = tapeDBJList.getSelectedValue();
        if(tapeID != null) {
            // load both records to the CassetteFlowFrame
            tapeID = tapeID.substring(0, tapeID.length() - 1);
            String tapeIdA = tapeID + "A";
            String tapeIdB = tapeID + "B";
            
            ArrayList<AudioInfo> sideAList = getAudioInfoList(tapeIdA);
            ArrayList<AudioInfo> sideBList = getAudioInfoList(tapeIdB);
            
            // get an estimate of tape length
            int tapeLength = (currentTapeLength/60)*2;
            cassetteFlowFrame.loadTapeInformation(tapeID, sideAList, sideBList, tapeLength);
        }
    }//GEN-LAST:event_loadTapeButtonActionPerformed
    
    /**
     * This merges the records from the lyraT board into the local tapeDB
     * @param evt 
     */
    private void syncButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_syncButtonActionPerformed
        cassetteFlowFrame.mergeCurrentTapeDBToLocal();
    }//GEN-LAST:event_syncButtonActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(TapeDatabaseFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(TapeDatabaseFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(TapeDatabaseFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(TapeDatabaseFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new TapeDatabaseFrame().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JList<String> audioFileJList;
    private javax.swing.JButton closeButton;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JButton loadTapeButton;
    private javax.swing.JButton syncButton;
    private javax.swing.JList<String> tapeDBJList;
    private javax.swing.JLabel totalTimeLabel;
    // End of variables declaration//GEN-END:variables
}
